What happens when you initialize a repository? Why do you need to do it?

	When initializing a repository, Git creates a folder '.git' where it will be
	storing the version history of the repository. It does not, however, create
	a first commit.
	You need to make this initialization in order to prepare Git for recording
	the files history. Otherwise there will be just current versions of the files.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is a virtual part of git (unlike the physical directory or repository)
	which allows you to temporarily	store files that you are going to commit. It makes
	it possible to make a list of different files, and to make a commit that is logically
	complete at once.
	
How can you use the staging area to make sure you have one commit per logical change?

	You can view the differences between different states of file or files that you want
	to commit. The command 'git diff' with no arguments will show the difference between
	the files in the directory and the files in the staging area. 'git diff --staged'
	will compare between the files in the staging area and the most recent commit.
	This way you can see exactly what changes you are bringing to the commit and make
	sure it is one logical change.
	Also, if there's a file that you have changed in the working directory, by you don't
	want to keep these changes (and you haven't staged them yet), the command
	'git reset --hard' will erase them.
	
What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

	When you want to try an experimental feature to the program, or change something
	profound in it as an experiment, you should use branches (another example would be
	trying out another language).
	Branches allow to do just that, without ruining the linear flow of the main pogram
	history.
	
How do diagrams help you visualize the branch structure?

	By drawing diagrams it is easier to see the reachability of different commits.
	If you're making changes to a commit that is not the tip of the branch, you
	actually create a detached commit, that will not be recorded in the history of
	the branch unless you create a new branch from the current point.
	
What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?

	The result is that the the versions are combined between the branches that are being
	merged, with the checked out branch as the main. It also leaves the history of the
	different branches intact. So you could trace back every state of every commit.
	While they are organized by timeline in 'git log', it is possible to use 'git show'
	to compare a commit to its parent.
	Merged branches are represented in the diagram the way they are because it shows how
	the branches' history stays accessible and how one branch "takes over" the other.
	
What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	The pros are: speed and convenience - if the code doesn't have any obvious conflicts,
	it is good to have an automated process to merge two files. It saves a lot of time and
	work.
	The cons are: Git is not smart enough to distinguish between real conflict and some minor
	differences like spacing, so you may have to recheck file's states more often than you'd
	like to.